{"version":3,"sources":["Counter.js","App.js","serviceWorker.js","index.js"],"names":["trashIco","width","height","viewBox","className","fill","xmlns","d","fillRule","resetIco","Counter","props","type","onClick","plusMinus","index","count","App","useState","counters","setCounters","n","value","newArr","map","el","i","key","r","Math","round","random","resetAll","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2MAGMA,G,KAAW,yBAAKC,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYC,UAAU,cAAcC,KAAK,eAC1EC,MAAM,8BACpB,0BACIC,EAAE,oKACN,0BAAMC,SAAS,UACTD,EAAE,iPAGVE,EAAW,yBAAKR,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYC,UAAU,yBACvDC,KAAK,eAAeC,MAAM,8BACxC,0BAAME,SAAS,UACTD,EAAE,0aAkCDG,MA/Bf,SAAiBC,GACb,OACI,yBAAKP,UAAU,OACX,4BAAQQ,KAAK,SAASR,UAAU,yBACxBS,QAAS,kBAAMF,EAAMG,UAAUH,EAAMI,OAAQ,KADrD,MAGA,4BAAQH,KAAK,SAASR,UAAU,yBACxBS,QAAS,kBAAMF,EAAMG,UAAUH,EAAMI,OAAQ,KADrD,MAGA,4BAAQH,KAAK,SAASR,UAAU,yBACxBS,QAAS,kBAAMF,EAAMG,UAAUH,EAAMI,OAAQ,KADrD,MAIA,0BAAMX,UAAU,MAAMO,EAAMK,OAE5B,4BAAQJ,KAAK,SAASR,UAAU,0BACxBS,QAAS,kBAAMF,EAAMG,UAAUH,EAAMI,MAAO,KADpD,MAGA,4BAAQH,KAAK,SAASR,UAAU,0BACxBS,QAAS,kBAAMF,EAAMG,UAAUH,EAAMI,MAAO,KADpD,MAGA,4BAAQH,KAAK,SAASR,UAAU,0BACxBS,QAAS,kBAAMF,EAAMG,UAAUH,EAAMI,MAAO,KADpD,MAGA,4BAAQH,KAAK,SAASR,UAAU,2BAA2BJ,GAC3D,4BAAQY,KAAK,SAASR,UAAU,2BAA2BK,K,MCExDQ,MAvCf,WAAgB,IAAD,EACqBC,mBAAS,CAAC,GAAG,EAAE,KADpC,mBACJC,EADI,KACMC,EADN,KAOLN,EAAY,SAACO,EAAGC,GAClB,IAAMC,EAAM,YAAOJ,GACnBI,EAAOF,IAAMC,EACbF,EAAYG,IAalB,OACE,yBAAKnB,UAAU,OAEVe,EAASK,KAAI,SAACC,EAAIC,GAAL,OAAU,kBAAC,EAAD,CACpBV,MAAOS,EACPE,IAAKD,EACLX,MAAOW,EACPZ,UAAWA,OAEf,4BAAQF,KAAK,SAASR,UAAU,oBAAoBS,QA7BpC,WAChB,IAAMe,EAAIC,KAAKC,MAAsB,GAAhBD,KAAKE,UAC1BX,EAAY,GAAD,mBAAKD,GAAL,CAAeS,OA2B1B,eACA,4BAAQhB,KAAK,SAASR,UAAU,eAAeS,QArBpC,WACXO,EAAY,MAoBZ,WACA,4BAAQP,QAlBG,WACX,IAAMmB,EAAQ,YAAOb,GAErBC,EAAYY,KAeZ,SC3BYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.09e41250.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst trashIco = <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-trash\" fill=\"currentColor\"\n                      xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/>\n        <path fillRule=\"evenodd\"\n              d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/>\n</svg>\n\nconst resetIco = <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-bootstrap-reboot\"\n                      fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path fillRule=\"evenodd\"\n              d=\"M1.161 8a6.84 6.84 0 1 0 6.842-6.84.58.58 0 0 1 0-1.16 8 8 0 1 1-6.556 3.412l-.663-.577a.58.58 0 0 1 .227-.997l2.52-.69a.58.58 0 0 1 .728.633l-.332 2.592a.58.58 0 0 1-.956.364l-.643-.56A6.812 6.812 0 0 0 1.16 8zm5.48-.079V5.277h1.57c.881 0 1.416.499 1.416 1.32 0 .84-.504 1.324-1.386 1.324h-1.6zm0 3.75V8.843h1.57l1.498 2.828h1.314L9.377 8.665c.897-.3 1.427-1.106 1.427-2.1 0-1.37-.943-2.246-2.456-2.246H5.5v7.352h1.141z\"/>\n</svg>\n\nfunction Counter(props) {\n    return (\n        <div className=\"App\">\n            <button type=\"button\" className=\"btn btn-outline-danger\"\n                    onClick={() => props.plusMinus(props.index, -1)}>-1\n            </button>\n            <button type=\"button\" className=\"btn btn-outline-danger\"\n                    onClick={() => props.plusMinus(props.index, -2)}>-2\n            </button>\n            <button type=\"button\" className=\"btn btn-outline-danger\"\n                    onClick={() => props.plusMinus(props.index, -3)}>-3\n            </button>\n\n            <span className=\"h3\">{props.count}</span>\n\n            <button type=\"button\" className=\"btn btn-outline-success\"\n                    onClick={() => props.plusMinus(props.index, 3)}>+3\n            </button>\n            <button type=\"button\" className=\"btn btn-outline-success\"\n                    onClick={() => props.plusMinus(props.index, 2)}>+2\n            </button>\n            <button type=\"button\" className=\"btn btn-outline-success\"\n                    onClick={() => props.plusMinus(props.index, 1)}>+1\n            </button>\n            <button type=\"button\" className=\"btn btn-outline-success\">{trashIco}</button>\n            <button type=\"button\" className=\"btn btn-outline-success\">{resetIco}</button>\n\n        </div>\n    );\n}\n\nexport default Counter;\n","import React, {useState} from 'react';\nimport Counter from \"./Counter\";\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nfunction App() {\n    const [counters, setCounters] = useState([10,3,22]);\n\n    const addCounters = () => {\n        const r = Math.round(Math.random() * 10);\n        setCounters([...counters, r])\n    }\n    const plusMinus = (n, value) => {\n        const newArr = [...counters];\n        newArr[n] += value\n        setCounters(newArr);\n    }\n    const delAll = () => {\n        setCounters([])\n    }\n\n    const resAll = () => {\n        const resetAll = [...counters];\n\n        setCounters(resetAll)\n    }\n\n\n  return (\n    <div className=\"App\">\n\n        {counters.map((el, i)=> <Counter\n            count={el}\n            key={i}\n            index={i}\n            plusMinus={plusMinus}\n            />)}\n        <button type=\"button\" className=\"btn btn-secondary\" onClick={addCounters}>Add Counter</button>\n        <button type=\"button\" className=\"btn btn-dark\" onClick={delAll}>Del All</button>\n        <button onClick={resAll}>RES</button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}